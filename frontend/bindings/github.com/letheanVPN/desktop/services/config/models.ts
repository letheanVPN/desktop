// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Create as $Create } from "@wailsio/runtime";

/**
 * Config holds the resolved paths for the application.
 */
export class Config {
    /**
     * For user-specific data files.
     */
    "DataDir": string;

    /**
     * For user-specific configuration files.
     */
    "ConfigDir": string;

    /**
     * For non-essential (cached) data.
     */
    "CacheDir": string;

    /**
     * The root directory for all workspaces.
     */
    "WorkspacesDir": string;

    /**
     * The top-level application directory (e.g., ~/Lethean).
     */
    "RootDir": string;

    /**
     * The user's home directory.
     */
    "UserHomeDir": string;

    /**
     * The default route for the application.
     */
    "DefaultRoute": string;

    /**
     * List of enabled features
     */
    "Features": string[];

    /**
     * The language for the application UI.
     */
    "Language": string;

    /** Creates a new Config instance. */
    constructor($$source: Partial<Config> = {}) {
        if (!("DataDir" in $$source)) {
            this["DataDir"] = "";
        }
        if (!("ConfigDir" in $$source)) {
            this["ConfigDir"] = "";
        }
        if (!("CacheDir" in $$source)) {
            this["CacheDir"] = "";
        }
        if (!("WorkspacesDir" in $$source)) {
            this["WorkspacesDir"] = "";
        }
        if (!("RootDir" in $$source)) {
            this["RootDir"] = "";
        }
        if (!("UserHomeDir" in $$source)) {
            this["UserHomeDir"] = "";
        }
        if (!("DefaultRoute" in $$source)) {
            this["DefaultRoute"] = "";
        }
        if (!("Features" in $$source)) {
            this["Features"] = [];
        }
        if (!("Language" in $$source)) {
            this["Language"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Config instance from a string or object.
     */
    static createFrom($$source: any = {}): Config {
        const $$createField7_0 = $$createType0;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Features" in $$parsedSource) {
            $$parsedSource["Features"] = $$createField7_0($$parsedSource["Features"]);
        }
        return new Config($$parsedSource as Partial<Config>);
    }
}

// Private type creation functions
const $$createType0 = $Create.Array($Create.Any);
